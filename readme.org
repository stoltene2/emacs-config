* Welcome
Let's get started with the configuration! This format is inspired by [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from Scratch Configuration]] and

#+begin_src emacs-lisp
  (setq lexical-binding t)
#+end_src

** General packages and configuration

*** TODO Company mode

    Not sure if I should be using both this and Counsel+Ivy+Swiper
    #+begin_src emacs-lisp
      ;; TODO: Figure out why this doesn't seem to load company-snippets
      (use-package company
        :diminish (company-mode . "\u24B8") ;; Circled C
        :ensure t
        :config
        (setq company-dabbrev-downcase nil)
        (setq company-minimum-prefix-length 3)
        (setq company-tooltip-margin 1)
        (setq company-tooltip-minimum-width 40)
        (global-company-mode)

        :bind
        (("C-'" . company-complete)))

    #+end_src

*** Git

**** Magit
     [[https://magit.vc/manual/magit.html][Magit documentation]]
     #+begin_src emacs-lisp
       (use-package magit
         :ensure t
         :diminish ((magit-mode . "") (magit-status-mode . ""))
         :bind (("C-c g" . magit-status)
                :map magit-status-mode-map
                ("q" . magit-quit-session))

         :config

         (defadvice magit-status (around magit-fullscreen activate)
           (magit-save-window-configuration)
           ad-do-it
           (delete-other-windows))

         (defun magit-quit-session ()
           "Restores the previous window configuration and kills the magit buffer"
           (interactive)
           (magit-restore-window-configuration)))

     #+end_src

**** Git gutter
     [[https://github.com/emacsorphanage/git-gutter][Git gutter documentation]]

     #+begin_src emacs-lisp
       (use-package git-gutter
         :ensure t
         :diminish git-gutter-mode
         :config
         (global-git-gutter-mode 1))

     #+end_src

**** Git Timemachine
     [[https://github.com/emacsmirror/git-timemachine][Git timemachine documentation]]

     #+begin_src emacs-lisp
       (use-package git-timemachine
         :ensure t)

     #+end_src

*** Navigation and coding
    #+begin_src emacs-lisp

    #+end_src

**** TODO Dumb jump                                                                                           :disabled:
     Usage needs to be tweaked to use xref mode
     [[https://github.com/jacktasia/dumb-jump#usage][Dumb jump documentation]]
     #+begin_src emacs-lisp
       (use-package dumb-jump

         :disabled
         :ensure t
         :bind
         ("C-M-g" . dumb-jump-go))

     #+end_src

**** Expand Region
     #+begin_src emacs-lisp
       (use-package expand-region
         :ensure t
         :bind (("C-=" . er/expand-region)
                ("M-=" . er/contract-region)))
     #+end_src

** Language support
*** Bazel mode                                                                                                :disabled:
    #+begin_src emacs-lisp
      (use-package bazel
        :disabled
        :ensure t
        :diminish bazel)

    #+end_src
*** Golang mode
    Make sure ~gopls~ is installed for lsp support to work correctly.
    [[https://github.com/dominikh/go-mode.el][Go mode docs]]
    #+begin_src emacs-lisp
      (use-package go-mode
        :ensure-system-package gopls
        :hook ((before-save-hook . gofmt-before-save)
               (go-mode . subword-mode)
               (go-mode . electric-pair-mode))
        :ensure t
        :config
        (setq tab-width 4)
        (use-package go-eldoc))
    #+end_src
*** Elm Mode
    #+begin_src emacs-lisp
      (use-package elm-mode
        :commands (lsp lsp-deferred lsp-format-buffer)
        :init
        (add-hook 'elm-mode-hook #'lsp-deferred)
        (add-hook 'before-save-hook #'lsp-format-buffer))
    #+end_src
*** JSON Mode

    #+begin_src emacs-lisp
      (use-package json-mode
        :ensure t
        :config
        (add-hook 'json-mode-hook #'hs-minor-mode)
        (add-hook 'json-mode-hook
                  (lambda ()
                    (setq js-indent-level 2))))

    #+end_src

*** Haskell Mode

    #+begin_src emacs-lisp
      (use-package haskell-mode
        :ensure t
        :config

        (custom-set-variables
         '(haskell-indentation-left-offset 4)
         '(haskell-indent-spaces 4)))

    #+end_src

*** Markdown mode
    #+begin_src emacs-lisp
      (use-package markdown-mode
        :ensure t)
    #+end_src

*** Ruby and Rails Configurations

    #+begin_src emacs-lisp
      (use-package ruby-mode
        :mode
        (("\\.rb$" . ruby-mode)
         ("Gemfile" . ruby-mode)
         ("Rakefile" . ruby-mode)
         ("\\.rake$" . ruby-mode)))
    #+end_src

*** Typescript

    #+begin_src emacs-lisp
      (use-package typescript-mode
        :ensure t
        :mode ("\\.ts\\'" . typescript-mode)
        :init (setq typescript-indent-level 2)
        :config
        (add-hook 'flycheck-mode-hook #'es/use-tslint-from-node-modules)
        (add-hook 'typescript-mode-hook #'hs-minor-mode)
        (add-hook 'typescript-mode-hook #'subword-mode))
    #+end_src

    In typescript I like having some keywords stand out a little more
    than the default mode. In the future this may be fixed in the
    mode. This is mainly a reference because I'd want this evaluated
    in the context of the buffer it is running.

    #+begin_src emacs-lisp
      (defun es/typescript-mode-extra-font-locks ()
        (font-lock-add-keywords nil
                                (list '("\\<\\(constructor\\|type\\|declare\\|var\\|interface\\|static\\|public\\|private\\|this\\|implements\\|let\\|function\\|const\\|new\\|false\\|true\\)\\>"  1 'font-lock-keyword-typescript-face prepend))))
    #+end_src

    Load the bespoke highlighting through Tide. Tide is a pretty good
    mode which makes editing Typscript decent.

    #+begin_src emacs-lisp
      (use-package tide
        :bind
        (:map tide-mode-map
              ([f2] . tide-rename-symbol))

        :config
        (setq tide-completion-enable-autoimport-suggestions t)

        ;; Highlight identifier at points
        (defface font-lock-keyword-typescript-face
          '((t :foreground "SlateBlue1"))
          "My custom face for typescript keywords"
          :group 'font-lock-faces)

        (add-hook 'typescript-mode-hook
                  (lambda ()
                    (interactive)
                    (tide-setup)
                    (flycheck-mode +1)
                    (setq flycheck-check-syntax-automatically '(save mode-enabled))
                    (eldoc-mode +1)
                    ;; company is an optional dependency. You have to
                    ;; install it separately via package-install
                    (company-mode +1)
                    (tide-hl-identifier-mode +1)
                    (setq company-tooltip-align-annotations t)
                    (font-lock-add-keywords nil
                                            (list
                                             '("\\<\\(constructor\\|type\\|declare\\|var\\|interface\\|static\\|public\\|private\\|this\\|implements\\|let\\|function\\|const\\|new\\|false\\|true\\)\\>"  1 'font-lock-keyword-typescript-face prepend)))))
        (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))

    #+end_src
*** YAML Mode

    #+begin_src emacs-lisp
      (use-package yaml-mode
        :mode ("\\.yml" . yaml-mode))

    #+end_src
** Utilities
*** Restclient
    [[https://github.com/pashky/restclient.el][Restclient documentation]]
    #+begin_src emacs-lisp
      (use-package restclient
        :ensure t)

    #+end_src
*** Url encode
    Utility for encoding/decoding urls. This is useful when looking at
    a really long encoded url, ~urlenc:decode-region~.
    #+begin_src emacs-lisp
      (use-package urlenc
        :ensure t)
    #+end_src
** Bells and whistles

   I've been using Emacs for decades but that doesn't mean I only run it
   in a terminal. Sometimes bells and whistles make me feel good.

   When emacs is first installed it probably doesn't have any of the
   fancy fonts installed. Don't forget to execute
   `all-the-icons-install-fonts`.
*** Themes

    I haven't gone full in on doom but I really like the doom-one
    color scheme. It's subtly different than spacemacs-dark. There is
    a [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][collection of screenshots]] for doom themes.
    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config (load-theme 'doom-one t))
    #+end_src
*** All the icons
    This [[https://github.com/domtronn/all-the-icons.el][package]] adds beautiful icons to Emacs and makes it feel more modern.

    #+begin_src emacs-lisp
      (use-package all-the-icons
        :ensure t)
    #+end_src

    #+begin_src emacs-lisp

      (use-package all-the-icons-ivy
;;        :disabled
        :after ivy
        :ensure t
        :init
        (add-hook 'after-init-hook 'all-the-icons-ivy-setup)

        :config
        (setq all-the-icons-ivy-file-commands
              '(counsel-find-file
                counsel-file-jump
                counsel-recentf
                counsel-projectile-find-file
                counsel-projectile-find-dir)))
    #+end_src

*** Company Box
    Get more context with [[https://github.com/sebastiencs/company-box][Company Box]] while using Company Mode
   #+begin_src emacs-lisp
     (use-package company-box
       :ensure t
       :after company
       :hook (company-mode . company-box-mode))
    #+end_src

*** Default text scale
    When I screenshare with someone there are times when I need to
    scale up all my buffers font size at once for all buffers. This is
    an incredibly useful library.
   #+begin_src emacs-lisp
     (use-package default-text-scale
       :ensure t
       :config
       (setq default-text-scale-amount 8)
       :bind
       ;; Plus makes it better
       ("M-+" . default-text-scale-increase)
       ;; Underscore makes it smaller (- is already bound)
       ("M-_" . default-text-scale-decrease))
   #+end_src

*** Fix me and todo mode

    Change the visual appearance of a TODO/FIXME item inside of comments.

    #+begin_src emacs-lisp
    (use-package fic-mode
      :ensure t

      :hook ((js2-mode-hook . fic-mode)
             (html-mode . fic-mode)
             (ruby-mode . fic-mode)
             (js-mode . fic-mode)
             (typescript-mode . fic-mode)))
    #+end_src
